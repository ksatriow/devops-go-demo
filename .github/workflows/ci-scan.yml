name: CICD Security Code Scan

on:
  push:
    branches:    
      - 'devops/**'
      - 'feat/**'
      - 'feature/**'
      - 'features/**'  

permissions: read-all

env:
  IMAGE_NAME: ${{ secrets.DOCKER_REPOSITORY }}
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}

jobs:
  security-checks:
    name: Security Pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.SHA }}

      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@v1.14.4
        with:
          args: -v --all-policies
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.ref_name }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}        
      - name: GitGuardian iac scan
        uses: GitGuardian/ggshield/actions/iac@main
        with:
          args: ./ --minimum-severity CRITICAL # pass arguments to the action. If missing, will scan the current directory
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: Run static analysis Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          security-checks: 'vuln,secret,config'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'

      # Checkov - Prevent cloud misconfigurations and find vulnerabilities during build-time in infrastructure as code
      - name: Run Checkov
        run: |
           docker run -t -v ${{ github.workspace }}:/tf --workdir /tf bridgecrew/checkov --directory . --skip-check CKV2_GHA_1

           - name: Setup Docker buildx
           uses: docker/setup-buildx-action@v2.5.0
   
      - name: Log into registry
        uses: docker/login-action@v2.1.0
        with:
          username: kukuhsatrio
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.revision=${{ env.SHA }}
            com.docker.image.source.entrypoint=${{ env.DOCKERFILE_PATH }}
   
      - name: Build and push Docker image on push
        id: build-and-push
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          load: false
          push: true
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: "linux/amd64"
          sbom: false
          provenance: false
      
      - name: Build and push Docker image on PR
        id: build-and-push-pr
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          load: true
          file: Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: "linux/amd64"
          sbom: false
          provenance: false          

      - name: Analyze for critical and high CVEs
        id: docker-scout-cves
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: docker/scout-action@788bd7991dd23939af62db37c4b77ec009021e17
        with:
          command: cves
          image: ${{ steps.meta.outputs.tags }}
          sarif-file: sarif.output.json
          platform: "linux/amd64"
          summary: true           